/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ComptonScattering;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author Geonmo
 */
public class ComptonViewPanel extends javax.swing.JPanel {

    int step, angle, wavelength;
    double angleP,wavelengthP;
    
    /**
     * Creates new form ComptonViewPanel
     */
    public ComptonViewPanel() {
        initComponents();
        step = 0;
        angle=0;
        angleP =0;
        wavelength= 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    public void drawWave(Graphics g,int first_pixel) {
        //step = step+1;
        int amp = 25;
        for( int i=0; i<50; i++ ){
            double value = Math.sin(i*0.5)*amp;
            double next_value = Math.sin((i+1)*0.5)*amp;
            g.drawLine(i+first_pixel,(int)value+this.getHeight()/2, i+1+first_pixel, (int)next_value+this.getHeight()/2);
            System.out.printf("%d %f %d %f\n",i+first_pixel,value, i+1+first_pixel,next_value);
        }
    }
    */
    public Color changeColor(int wavelength){
            Color co = Color.BLACK;
            double rel = (1-(wavelength-300.)/(800.0-300.0))*0.8;
            if ( wavelength>0) {
                co = Color.getHSBColor( (float)rel, 1f, 1f);            
            }
            else {                                
                co = Color.getHSBColor( (float)rel, 0.5f, 0.5f);            
            }
            return co;
        }
    
    
    
    public void drawElectron(Graphics g, Point pos){
        //int height = this.getHeight();
        //int width = this.getWidth();
        
        g.fillOval(pos.x-10, pos.y-10,20,20);
    }
    public void setAngle(int angle) {
        this.angle = -angle;
    }
    public void setAngleP(double angle) {
        this.angleP = angle;
    }
    public void setWavelength(int wavelength) {
        this.wavelength = wavelength;
    }
    public void setWavelengthP(double wavelength) {
        this.wavelengthP = wavelength;
    }
    public void paintComponent(Graphics g)                
    {   
        super.paintComponent(g);
        step = step+1;        
        int amp = 25;
        int height = this.getHeight();
        int width = this.getWidth();
        
        if ( step < this.getWidth()/2-1 ) { 
            for( int i=0; i<step; i++ ){
                g.setColor(changeColor(this.wavelength));
                double value = Math.sin(i*0.25)*amp;
                double next_value = Math.sin((i+1)*0.25)*amp;
                g.drawLine(i,(int)value+this.getHeight()/2, i+1, (int)next_value+this.getHeight()/2);
                //System.out.printf("%d %f %d %f\n",i+first_pixel,value, i+1+first_pixel,next_value);
                g.setColor(Color.BLACK);
                drawElectron(g, new Point(width/2, height/2));
            }
        }
        else {
            for( int i=0  ; i< step-this.getWidth()/2 ; i++ ) {
                double x = i;
                double next_x = i+1;
                double y =  Math.sin(i*0.25)*amp;
                double next_y =  Math.sin( (i+1)*0.25)*amp;
                
                g.setColor(changeColor((int)(this.wavelength)));
                double x_prime = x*Math.cos(Math.toRadians(angle))-y*Math.sin(Math.toRadians(angle)) + this.getWidth()/2;
                double y_prime = x*Math.sin(Math.toRadians(angle))+y*Math.cos(Math.toRadians(angle)) + this.getHeight()/2;                
                double next_x_prime = next_x*Math.cos(Math.toRadians(angle))-next_y*Math.sin(Math.toRadians(angle)) + this.getWidth()/2;
                double next_y_prime = next_x*Math.sin(Math.toRadians(angle))+next_y*Math.cos(Math.toRadians(angle)) + this.getHeight()/2;
                
                g.drawLine((int)x_prime, (int) y_prime, (int)next_x_prime, (int)next_y_prime);
                
                
                
                g.setColor(Color.MAGENTA);
                
                //double angleP = Math.asin( )
                
                double e_x_prime = x*Math.cos(Math.toRadians(angleP)) + this.getWidth()/2;
                double e_y_prime = x*Math.sin(Math.toRadians(angleP)) + this.getHeight()/2;
                double next_e_x_prime = (x+1)*Math.cos(Math.toRadians(angleP)) + this.getWidth()/2;
                double next_e_y_prime = (x+1)*Math.sin(Math.toRadians(angleP)) + this.getHeight()/2;
                g.drawLine((int)e_x_prime, (int) e_y_prime, (int)next_e_x_prime, (int)next_e_y_prime);
                g.setColor(Color.BLACK);
                
            }    
            double x = step-width/2;
            double e_x_prime = x*Math.cos(Math.toRadians(angleP)) + this.getWidth()/2;
            double e_y_prime = x*Math.sin(Math.toRadians(angleP)) + this.getHeight()/2;
            g.setColor(Color.BLACK); 
            drawElectron(g, new Point((int)e_x_prime, (int)e_y_prime));
                
                
            
        }
        String temp_string = "Scattered wavelength : ";
        temp_string+= String.valueOf(this.wavelengthP);
        temp_string+= "nm";
        g.drawString(temp_string, this.getWidth()/2-100, 200);
      

        
            
        g.setColor(Color.black);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
